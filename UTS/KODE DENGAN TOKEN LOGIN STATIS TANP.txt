KODE DENGAN TOKEN LOGIN STATIS TANPA CSRF


CLIENT.JS

const express = require('express');

const app = express();
const port = 3001;

// Halaman Login (Sign In)
app.get('/', (req, res) => {
  const message = req.query.message || ''; // Mendapatkan pesan dari query string

  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Sign In</title>
    </head>
    <body>
      <h2>Login Form</h2>
      ${message ? `<p>${message}</p>` : ''} <!-- Menampilkan pesan jika ada -->
      <form action="http://localhost:3002/signin" method="POST">
        <label>Email:</label>
        <input type="email" name="email" required><br>
        <label>Password:</label>
        <input type="password" name="password" required><br>
        <button type="submit">Sign In</button>
      </form>
      <a href="/signup">Belum punya akun? Daftar di sini</a>
    </body>
    </html>
  `);
});

// Halaman Sign Up
app.get('/signup', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Sign Up</title>
    </head>
    <body>
      <h2>Signup Form</h2>
      <form action="http://localhost:3002/signup" method="POST">
        <label>Email:</label>
        <input type="email" name="email" required><br>
        <label>Password:</label>
        <input type="password" name="password" required><br>
        <label>Nama:</label>
        <input type="text" name="nama" required><br>
        <label>Nomor HP:</label>
        <input type="text" name="nomor_hp" required><br>
        <label>Alamat Web:</label>
        <input type="text" name="alamat_web" required><br>
        <label>Tempat Lahir:</label>
        <input type="text" name="tempat_lahir" required><br>
        <label>Tanggal Lahir:</label>
        <input type="date" name="tanggal_lahir" required><br>
        <label>No. KK:</label>
        <input type="text" name="no_kk" required><br>
        <label>No. KTP:</label>
        <input type="text" name="no_ktp" required><br>
        <button type="submit">Sign Up</button>
      </form>
    </body>
    </html>
  `);
});

// Halaman Member (Setelah Login)
app.get('/member', (req, res) => {
  const userName = req.query.userName || 'Member'; // Dapatkan nama pengguna dari query string, default 'Member'

  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Member</title>
    </head>
    <body>
      <h2>Selamat datang, ${userName}!</h2>
      <p>Anda berhasil login dan kini berada di halaman member.</p>
    </body>
    </html>
  `);
});

// Menjalankan server
app.listen(port, () => {
  console.log(`Client running at http://localhost:${port}`);
});


SERVER.JS
const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const cors = require('cors');
const xss = require('xss');
const cookieParser = require('cookie-parser');

const app = express();
const port = 3002;

// Enable CORS
app.use(cors());

// Use cookie-parser
app.use(cookieParser());

const db = new sqlite3.Database('./users.db', (err) => {
  if (err) {
    console.error('Error opening database', err);
  } else {
    console.log('Connected to SQLite database.');
  }
});

// Create users table if not exists
db.serialize(() => {
  db.run("DROP TABLE IF EXISTS users"); // Drop table if already exists
  db.run(`
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        email TEXT UNIQUE,
        password TEXT,
        nama TEXT,
        nomor_hp TEXT,
        alamat_web TEXT,
        tempat_lahir TEXT,
        tanggal_lahir TEXT,
        no_kk TEXT,
        no_ktp TEXT
    )
  `);
});

app.use(express.urlencoded({ extended: true }));
app.use(express.json());

// Handle form signup without CSRF protection
app.post('/signup', (req, res) => {
  // Sanitize input using xss
  const email = xss(req.body.email);
  const password = xss(req.body.password);
  const nama = xss(req.body.nama);
  const nomor_hp = xss(req.body.nomor_hp);
  const alamat_web = xss(req.body.alamat_web);
  const tempat_lahir = xss(req.body.tempat_lahir);
  const tanggal_lahir = xss(req.body.tanggal_lahir);
  const no_kk = xss(req.body.no_kk);
  const no_ktp = xss(req.body.no_ktp);

  db.run(
    `INSERT INTO users 
      (email, password, nama, nomor_hp, alamat_web, tempat_lahir, tanggal_lahir, no_kk, no_ktp) 
      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
    [email, password, nama, nomor_hp, alamat_web, tempat_lahir, tanggal_lahir, no_kk, no_ktp],
    (err) => {
      if (err) {
        return res.status(500).json({ message: 'Failed to register user' });
      }
      // Redirect to login with a confirmation message
      res.redirect(`http://localhost:3001/?message=Selamat ${nama}, Anda telah berhasil signup. Silahkan login`);
    }
  );
});

// Handle form signin without CSRF protection
app.post('/signin', (req, res) => {
  // Sanitize input using xss
  const email = xss(req.body.email);
  const password = xss(req.body.password);

  // Validate input
  if (!email || !password) {
    return res.status(400).json({ message: 'Email dan password harus diisi' });
  }

  // Search for user by email
  db.get('SELECT * FROM users WHERE email = ?', [email], (err, row) => {
    if (err) {
      return res.status(500).json({ message: 'Internal server error', error: err.message });
    }

    if (!row) {
      return res.status(400).json({ message: 'Email tidak ditemukan' });
    }

    // Check if the password matches
    if (row.password !== password) {
      return res.status(400).json({ message: 'Password salah' });
    }

    // Set a static token after successful login
    res.cookie('token', 'A001'); // Token A001

    // Redirect to member page with user data
    res.redirect(`http://localhost:3001/member?userName=${encodeURIComponent(row.nama)}&email=${email}`);
  });
});

// Endpoint for users to view all users (excluding password)
app.get('/users', (req, res) => {
  db.all('SELECT id, email, nama, nomor_hp, alamat_web, tempat_lahir, tanggal_lahir, no_kk, no_ktp FROM users', [], (err, rows) => {
    if (err) {
      return res.status(500).json({ message: 'Internal server error', error: err.message });
    }
    res.json({ users: rows });
  });
});


app.listen(port, () => {
  console.log(`Server running on http://localhost:${port}`);
});
